#!/bin/bash

set -eu

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - HELP
log() { echo "$@" 1>&2; }

# show help if --help is passed as parameter
if [[ $@ == --help ]]; then
  log "This script tags and pushes a local Docker image to the Docker Hub."
  log "# Script's environment variables"
  log "Env var (MUST)        : <DOCKER_USERNAME>"
  log "Env var (MUST)        : <DOCKER_PASSWORD>"
  log "Env var (MUST)        : <REMOTE_IMAGE_NAME> f.e. livingdocs/service-server, the name of the image you want in the Docker Hub without the tag"
  log "Env var (MUST)        : <LOCAL_IMAGE_NAME_AND_TAG> local/server:test, the name of a just built local image"
  log "Env var (MUST)        : <GIT_BRANCH> Name of the branch except when in presence of a PR, in that case it's the name of the branch targeted by the PR. In travis it's 'TRAVIS_BRANCH'."
  log "Env var (MUST)        : <PULL_REQUEST_BRANCH> either the name of the branch if there is a PR or an empty string ''. In Travis it's 'TRAVIS_PULL_REQUEST'"
  log "Env var (MUST)        : <COMMIT_HASH> In Travis it's: 'TRAVIS_COMMIT'."
  log "Env var (MUST)        : <COMMIT_TAG> f.e. v4.2.0. In Travis it's 'TRAVIS_TAG'."
  log "Env var (MUST)        : <TEST_MODE>"
  exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - FUNCTIONS
areDockerCredentialsMissing () {
  isMissingDockerUsername || isMissingDockerPassword
}

isReleaseBranch () { [[ $GIT_BRANCH =~ ^release- ]]; }
isMasterBranch () { [[ $GIT_BRANCH == master ]]; }
isPullRequest () { [[ $PULL_REQUEST_BRANCH != '' ]]; }
hasTag () { [[ -n $COMMIT_TAG ]]; }
isNotPullRequest () { ! isPullRequest; }

isFeatureBranch () { isMasterBranch && isPullRequest; }
isMergingOnMaster () { isMasterBranch && isNotPullRequest; }
isMergingOnRelease () { isReleaseBranch && isNotPullRequest; }

prepareTags () {
  HASH_TAG="hash-$COMMIT_HASH"
  FEATURE_TAG="feature-$PULL_REQUEST_BRANCH-hash-$COMMIT_HASH"
  RELEASE_BRANCH_TAG="branch-$GIT_BRANCH-hash-$COMMIT_HASH"
  TAG_TAG="tag-$COMMIT_TAG"
}

initializeDockerTags () { DOCKER_TAGS=''; }

hasDockerTags () { [ "x$DOCKER_TAGS" != "x" ]; }

dockerLogin () {
  log "  Executing: docker login -u=**** -p=****"
  execute \
    "docker login -u=\"$DOCKER_USERNAME\" -p=\"$DOCKER_PASSWORD\""
}

dockerTag () {
  DOCKER_REMOTE_IMAGE=$1
  DOCKER_TAG_COMMAND="docker tag $LOCAL_IMAGE_NAME_AND_TAG $DOCKER_REMOTE_IMAGE"
  log "  Executing: $DOCKER_TAG_COMMAND"
  execute $DOCKER_TAG_COMMAND
}

dockerPush () {
  DOCKER_REMOTE_IMAGE=$1
  DOCKER_PUSH_COMMAND="docker push $DOCKER_REMOTE_IMAGE"
  log "  Executing: $DOCKER_PUSH_COMMAND"
  execute $DOCKER_PUSH_COMMAND
}

isNotInTestMode () { ! [[ $TEST_MODE == true ]]; }

execute () {
  if isNotInTestMode; then
    eval $* 1>&2
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - VARIABLES
RETURNVALUE=""
TEST_MODE=false
DOCKER_USERNAME=${docker_username:-''}
DOCKER_PASSWORD=${docker_password:-''}
REMOTE_IMAGE_NAME=${remote_image_name:-''}
LOCAL_IMAGE_NAME_AND_TAG=${local_image_name_and_tag:-''}
GIT_BRANCH=${git_branch:-''}
PULL_REQUEST_BRANCH=${pull_request_branch:-''}
COMMIT_HASH=${commit_hash:-''}
COMMIT_TAG=${commit_tag:-''}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - EXECUTION
log "release-tools: Tagging and pushing Docker images."

if [[ $@ == --test ]]; then
  TEST_MODE=true
fi

initializeDockerTags
prepareTags

if isFeatureBranch; then
  log "  Detecting a feature branch."
  log "  Tagging two images: hash-tag and feature-tag."
  DOCKER_TAGS="$HASH_TAG $FEATURE_TAG"
  RETURNVALUE="$FEATURE_TAG"
fi

if isMergingOnMaster; then
  log "  Detecting a merge to the master branch."
  log "  Tagging one image: hash-tag."
  DOCKER_TAGS="$HASH_TAG"
  RETURNVALUE="$HASH_TAG"
fi

if isMergingOnRelease; then
  log "  Detecting a merge to the release branch."
  log "  Tagging two images: hash-tag and release-branch-tag."
  DOCKER_TAGS="$HASH_TAG $RELEASE_BRANCH_TAG"
  RETURNVALUE="$RELEASE_BRANCH_TAG"
fi

if hasTag; then
  log "  Detecting a tag."
  log "  Tagging two images: hash-tag and tag-tag."
  DOCKER_TAGS="$HASH_TAG $TAG_TAG"
  RETURNVALUE="$TAG_TAG"
fi

if hasDockerTags; then
  dockerLogin
  for DOCKER_TAG in $DOCKER_TAGS; do
    DOCKER_REMOTE_IMAGE=$REMOTE_IMAGE_NAME:$DOCKER_TAG

    dockerTag $DOCKER_REMOTE_IMAGE
    dockerPush $DOCKER_REMOTE_IMAGE
  done
else
  log "  No tagging case has occurred. Abort operation."
fi

# use the return value in stdout
echo $RETURNVALUE
