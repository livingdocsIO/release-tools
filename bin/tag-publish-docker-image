#!/bin/bash
set -eu

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - FUNCTIONS
log() { echo "$@" 1>&2; }

help () {
  log "This script tags and pushes a local Docker image to the Docker Hub."
  log ""
  log "---------------------------------------"
  log "You MUST define the following variables"
  log "---------------------------------------"
  log "<DOCKER_USERNAME>                                                The username on Dockerhub"
  log "<DOCKER_PASSWORD>                                                The password on Dockerhub"
  log "<REMOTE_IMAGE_NAME>        example: 'livingdocs/service-server'. The docker image name on Docker Hub without tag"
  log "<LOCAL_IMAGE_NAME_AND_TAG> example: 'local/server:test'.         The docker image name of a local docker image"
  log ""
  log "------------------------------------------------------------------------------------------------------"
  log "This environment variables are optional. Based on this variables the script decides how to tag images."
  log "------------------------------------------------------------------------------------------------------"
  log "<PULL_REQUEST_NUMBER>      example: '77' or ''"
  log "<BRANCH_NAME>              example: 'my-branch'                  Branch name or referenced branch name of a pull request"
  log "<COMMIT_SHA>               example: '194760449bbca8e13d07013727f4e81d2e5ee81b'"
  log "<COMMIT_TAG>               example: 'v4.2.0'"
  log "<TEST_MODE>                                                      In test mode nothing gets executed, you see only log messages"
  exit 1
}

isReleaseBranch () { [[ $BRANCH_NAME =~ ^release- ]]; }
isMasterBranch () { [[ $BRANCH_NAME == master ]]; }
isFeatureBranch () { isMasterBranch && isPullRequest; }
isPullRequest () { [[ $PULL_REQUEST_NUMBER != '' ]]; }
isNotPullRequest () { ! isPullRequest; }
hasTag () { [[ -n $COMMIT_TAG ]]; }

prepareTags () {
  SHA_TAG="sha-$COMMIT_SHA"
  FEATURE_TAG="feature-$PULL_REQUEST_NUMBER-sha-$COMMIT_SHA"
  RELEASE_BRANCH_TAG="branch-$BRANCH_NAME-sha-$COMMIT_SHA"
  TAG_TAG="tag-$COMMIT_TAG"
}

hasDockerTags () { [ "x$DOCKER_TAGS" != "x" ]; }

dockerLogin () {
  log "  Executing: docker login -u=**** -p=****"
  execute \
    "docker login -u=\"$DOCKER_USERNAME\" -p=\"$DOCKER_PASSWORD\""
}

dockerTag () {
  DOCKER_REMOTE_IMAGE=$1
  DOCKER_TAG_COMMAND="docker tag $LOCAL_IMAGE_NAME_AND_TAG $DOCKER_REMOTE_IMAGE"
  log "  Executing: $DOCKER_TAG_COMMAND"
  execute $DOCKER_TAG_COMMAND
}

dockerPush () {
  DOCKER_REMOTE_IMAGE=$1
  DOCKER_PUSH_COMMAND="docker push $DOCKER_REMOTE_IMAGE"
  log "  Executing: $DOCKER_PUSH_COMMAND"
  execute $DOCKER_PUSH_COMMAND
}

isNotInTestMode () { ! [[ $TEST_MODE == true ]]; }

execute () {
  if isNotInTestMode; then
    eval $* 1>&2
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - VARIABLES
RETURN_VALUE=""
TEST_MODE=false
DOCKER_USERNAME=${docker_username:-''}
DOCKER_PASSWORD=${docker_password:-''}
REMOTE_IMAGE_NAME=${remote_image_name:-''}
LOCAL_IMAGE_NAME_AND_TAG=${local_image_name_and_tag:-''}
BRANCH_NAME=${branch_name:-''}
PULL_REQUEST_NUMBER=${pull_request_number:-''}
COMMIT_SHA=${commit_sha:-''}
COMMIT_TAG=${commit_tag:-''}
DOCKER_TAGS=''

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - EXECUTION
# show help if --help / -h is passed as parameter
[[ $@ == --help || $@ == -h ]] && help

# Mandatory environment variables
[[ -z "$DOCKER_USERNAME" ]] && help
[[ -z "$DOCKER_PASSWORD" ]] && help
[[ -z "$REMOTE_IMAGE_NAME" ]] && help
[[ -z "$LOCAL_IMAGE_NAME_AND_TAG" ]] && help


log "release-tools: Tagging and pushing Docker images."

if [[ $@ == --test ]]; then
  TEST_MODE=true
fi

prepareTags

if isFeatureBranch; then
  log "  Add tags (sha-tag / feature-tag) to docker image based on a feature branch."
  DOCKER_TAGS="$SHA_TAG $FEATURE_TAG"
  RETURN_VALUE="$FEATURE_TAG"
fi

if isMasterBranch && isNotPullRequest; then
  log "  Add tags (sha-tag) Add sha-tag to docker image based on the master branch."
  DOCKER_TAGS="$SHA_TAG"
  RETURN_VALUE="$SHA_TAG"
fi

if isReleaseBranch && isNotPullRequest; then
  log "  Add tags (sha-tag / release-branch-tag) to docker image based on a release branch."
  DOCKER_TAGS="$SHA_TAG $RELEASE_BRANCH_TAG"
  RETURN_VALUE="$RELEASE_BRANCH_TAG"
fi

if hasTag; then
  log "  Add tags (sha-tag / tag) to docker image based on a tag."
  DOCKER_TAGS="$SHA_TAG $TAG_TAG"
  RETURN_VALUE="$TAG_TAG"
fi

if hasDockerTags; then
  dockerLogin
  for DOCKER_TAG in $DOCKER_TAGS; do
    DOCKER_REMOTE_IMAGE=$REMOTE_IMAGE_NAME:$DOCKER_TAG

    dockerTag $DOCKER_REMOTE_IMAGE
    dockerPush $DOCKER_REMOTE_IMAGE
  done
else
  log "  No tagging scenario has been applied based on the passed arguments. Abort operation."
fi

# use the return value in stdout
echo $RETURN_VALUE
